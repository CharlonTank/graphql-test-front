-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module UserEating.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import UserEating.InputObject
import UserEating.Interface
import UserEating.Object
import UserEating.Scalar
import UserEating.ScalarCodecs
import UserEating.Union


{-| Returns the current user
-}
me : SelectionSet decodesTo UserEating.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
me object_ =
    Object.selectionForCompositeField "me" [] object_ (identity >> Decode.nullable)


type alias SubscribedQueriesOptionalArguments =
    { page : OptionalArgument Int
    , per_page : OptionalArgument Int
    }


{-| Returns a SubscribedQuery
-}
subscribed_queries : (SubscribedQueriesOptionalArguments -> SubscribedQueriesOptionalArguments) -> SelectionSet decodesTo UserEating.Object.SubscribedQuery -> SelectionSet (List decodesTo) RootQuery
subscribed_queries fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { page = Absent, per_page = Absent }

        optionalArgs =
            [ Argument.optional "page" filledInOptionals.page Encode.int, Argument.optional "per_page" filledInOptionals.per_page Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "subscribed_queries" optionalArgs object_ (identity >> Decode.list)


type alias SubscribedQueryRequiredArguments =
    { id : String }


{-| Returns a SubscribedQuery
-}
subscribed_query : SubscribedQueryRequiredArguments -> SelectionSet decodesTo UserEating.Object.SubscribedQuery -> SelectionSet decodesTo RootQuery
subscribed_query requiredArgs object_ =
    Object.selectionForCompositeField "subscribed_query" [ Argument.required "id" requiredArgs.id Encode.string ] object_ identity


type alias UserRequiredArguments =
    { id : String }


{-| Returns a User
-}
user : UserRequiredArguments -> SelectionSet decodesTo UserEating.Object.User -> SelectionSet decodesTo RootQuery
user requiredArgs object_ =
    Object.selectionForCompositeField "user" [ Argument.required "id" requiredArgs.id Encode.string ] object_ identity


type alias UserStatusRequiredArguments =
    { id : String }


{-| Returns a UserStatus
-}
user_status : UserStatusRequiredArguments -> SelectionSet decodesTo UserEating.Object.UserStatus -> SelectionSet decodesTo RootQuery
user_status requiredArgs object_ =
    Object.selectionForCompositeField "user_status" [ Argument.required "id" requiredArgs.id Encode.string ] object_ identity


type alias UserStatusesOptionalArguments =
    { page : OptionalArgument Int
    , per_page : OptionalArgument Int
    }


{-| Returns a UserStatus
-}
user_statuses : (UserStatusesOptionalArguments -> UserStatusesOptionalArguments) -> SelectionSet decodesTo UserEating.Object.UserStatus -> SelectionSet (List decodesTo) RootQuery
user_statuses fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { page = Absent, per_page = Absent }

        optionalArgs =
            [ Argument.optional "page" filledInOptionals.page Encode.int, Argument.optional "per_page" filledInOptionals.per_page Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "user_statuses" optionalArgs object_ (identity >> Decode.list)


type alias UsersOptionalArguments =
    { page : OptionalArgument Int
    , per_page : OptionalArgument Int
    }


{-| Returns a User
-}
users : (UsersOptionalArguments -> UsersOptionalArguments) -> SelectionSet decodesTo UserEating.Object.User -> SelectionSet (List decodesTo) RootQuery
users fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { page = Absent, per_page = Absent }

        optionalArgs =
            [ Argument.optional "page" filledInOptionals.page Encode.int, Argument.optional "per_page" filledInOptionals.per_page Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "users" optionalArgs object_ (identity >> Decode.list)


type alias WebsocketConnectionRequiredArguments =
    { id : String }


{-| Returns a WebsocketConnection
-}
websocket_connection : WebsocketConnectionRequiredArguments -> SelectionSet decodesTo UserEating.Object.WebsocketConnection -> SelectionSet decodesTo RootQuery
websocket_connection requiredArgs object_ =
    Object.selectionForCompositeField "websocket_connection" [ Argument.required "id" requiredArgs.id Encode.string ] object_ identity


type alias WebsocketConnectionsOptionalArguments =
    { page : OptionalArgument Int
    , per_page : OptionalArgument Int
    }


{-| Returns a WebsocketConnection
-}
websocket_connections : (WebsocketConnectionsOptionalArguments -> WebsocketConnectionsOptionalArguments) -> SelectionSet decodesTo UserEating.Object.WebsocketConnection -> SelectionSet (List decodesTo) RootQuery
websocket_connections fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { page = Absent, per_page = Absent }

        optionalArgs =
            [ Argument.optional "page" filledInOptionals.page Encode.int, Argument.optional "per_page" filledInOptionals.per_page Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "websocket_connections" optionalArgs object_ (identity >> Decode.list)
