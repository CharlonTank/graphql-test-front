-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module UserEating.Mutation exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import UserEating.InputObject
import UserEating.Interface
import UserEating.Object
import UserEating.Scalar
import UserEating.ScalarCodecs
import UserEating.Union


type alias BulkCreateSubscribedQueryRequiredArguments =
    { subscribed_query : List (Maybe UserEating.InputObject.SubscribedQueryInputType) }


{-| creates some SubscribedQueries
-}
bulk_create_subscribed_query : BulkCreateSubscribedQueryRequiredArguments -> SelectionSet decodesTo UserEating.Object.SubscribedQuery -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
bulk_create_subscribed_query requiredArgs object_ =
    Object.selectionForCompositeField "bulk_create_subscribed_query" [ Argument.required "subscribed_query" requiredArgs.subscribed_query (UserEating.InputObject.encodeSubscribedQueryInputType |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias BulkCreateUserRequiredArguments =
    { user : List (Maybe UserEating.InputObject.UserInputType) }


{-| creates some Users
-}
bulk_create_user : BulkCreateUserRequiredArguments -> SelectionSet decodesTo UserEating.Object.User -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
bulk_create_user requiredArgs object_ =
    Object.selectionForCompositeField "bulk_create_user" [ Argument.required "user" requiredArgs.user (UserEating.InputObject.encodeUserInputType |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias BulkCreateUserStatusRequiredArguments =
    { user_status : List (Maybe UserEating.InputObject.UserStatusInputType) }


{-| creates some UserStatuses
-}
bulk_create_user_status : BulkCreateUserStatusRequiredArguments -> SelectionSet decodesTo UserEating.Union.UserStatus -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
bulk_create_user_status requiredArgs object_ =
    Object.selectionForCompositeField "bulk_create_user_status" [ Argument.required "user_status" requiredArgs.user_status (UserEating.InputObject.encodeUserStatusInputType |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias BulkCreateWebsocketConnectionRequiredArguments =
    { websocket_connection : List (Maybe UserEating.InputObject.WebsocketConnectionInputType) }


{-| creates some WebsocketConnections
-}
bulk_create_websocket_connection : BulkCreateWebsocketConnectionRequiredArguments -> SelectionSet decodesTo UserEating.Object.WebsocketConnection -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
bulk_create_websocket_connection requiredArgs object_ =
    Object.selectionForCompositeField "bulk_create_websocket_connection" [ Argument.required "websocket_connection" requiredArgs.websocket_connection (UserEating.InputObject.encodeWebsocketConnectionInputType |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias BulkUpdateSubscribedQueryRequiredArguments =
    { subscribed_query : List (Maybe UserEating.InputObject.SubscribedQueryInputType) }


{-| Updates some SubscribedQueries
-}
bulk_update_subscribed_query : BulkUpdateSubscribedQueryRequiredArguments -> SelectionSet decodesTo UserEating.Object.SubscribedQuery -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
bulk_update_subscribed_query requiredArgs object_ =
    Object.selectionForCompositeField "bulk_update_subscribed_query" [ Argument.required "subscribed_query" requiredArgs.subscribed_query (UserEating.InputObject.encodeSubscribedQueryInputType |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias BulkUpdateUserRequiredArguments =
    { user : List (Maybe UserEating.InputObject.UserInputType) }


{-| Updates some Users
-}
bulk_update_user : BulkUpdateUserRequiredArguments -> SelectionSet decodesTo UserEating.Object.User -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
bulk_update_user requiredArgs object_ =
    Object.selectionForCompositeField "bulk_update_user" [ Argument.required "user" requiredArgs.user (UserEating.InputObject.encodeUserInputType |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias BulkUpdateUserStatusRequiredArguments =
    { user_status : List (Maybe UserEating.InputObject.UserStatusInputType) }


{-| Updates some UserStatuses
-}
bulk_update_user_status : BulkUpdateUserStatusRequiredArguments -> SelectionSet decodesTo UserEating.Union.UserStatus -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
bulk_update_user_status requiredArgs object_ =
    Object.selectionForCompositeField "bulk_update_user_status" [ Argument.required "user_status" requiredArgs.user_status (UserEating.InputObject.encodeUserStatusInputType |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias BulkUpdateWebsocketConnectionRequiredArguments =
    { websocket_connection : List (Maybe UserEating.InputObject.WebsocketConnectionInputType) }


{-| Updates some WebsocketConnections
-}
bulk_update_websocket_connection : BulkUpdateWebsocketConnectionRequiredArguments -> SelectionSet decodesTo UserEating.Object.WebsocketConnection -> SelectionSet (Maybe (List (Maybe decodesTo))) RootMutation
bulk_update_websocket_connection requiredArgs object_ =
    Object.selectionForCompositeField "bulk_update_websocket_connection" [ Argument.required "websocket_connection" requiredArgs.websocket_connection (UserEating.InputObject.encodeWebsocketConnectionInputType |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias CreateSubscribedQueryRequiredArguments =
    { subscribed_query : UserEating.InputObject.SubscribedQueryInputType }


{-| Creates a SubscribedQuery
-}
create_subscribed_query : CreateSubscribedQueryRequiredArguments -> SelectionSet decodesTo UserEating.Object.SubscribedQuery -> SelectionSet (Maybe decodesTo) RootMutation
create_subscribed_query requiredArgs object_ =
    Object.selectionForCompositeField "create_subscribed_query" [ Argument.required "subscribed_query" requiredArgs.subscribed_query UserEating.InputObject.encodeSubscribedQueryInputType ] object_ (identity >> Decode.nullable)


type alias CreateUserRequiredArguments =
    { user : UserEating.InputObject.UserInputType }


{-| Creates a User
-}
create_user : CreateUserRequiredArguments -> SelectionSet decodesTo UserEating.Object.User -> SelectionSet (Maybe decodesTo) RootMutation
create_user requiredArgs object_ =
    Object.selectionForCompositeField "create_user" [ Argument.required "user" requiredArgs.user UserEating.InputObject.encodeUserInputType ] object_ (identity >> Decode.nullable)


type alias CreateUserStatusRequiredArguments =
    { user_status : UserEating.InputObject.UserStatusInputType }


{-| Creates a UserStatus
-}
create_user_status : CreateUserStatusRequiredArguments -> SelectionSet decodesTo UserEating.Union.UserStatus -> SelectionSet (Maybe decodesTo) RootMutation
create_user_status requiredArgs object_ =
    Object.selectionForCompositeField "create_user_status" [ Argument.required "user_status" requiredArgs.user_status UserEating.InputObject.encodeUserStatusInputType ] object_ (identity >> Decode.nullable)


type alias CreateWebsocketConnectionRequiredArguments =
    { websocket_connection : UserEating.InputObject.WebsocketConnectionInputType }


{-| Creates a WebsocketConnection
-}
create_websocket_connection : CreateWebsocketConnectionRequiredArguments -> SelectionSet decodesTo UserEating.Object.WebsocketConnection -> SelectionSet (Maybe decodesTo) RootMutation
create_websocket_connection requiredArgs object_ =
    Object.selectionForCompositeField "create_websocket_connection" [ Argument.required "websocket_connection" requiredArgs.websocket_connection UserEating.InputObject.encodeWebsocketConnectionInputType ] object_ (identity >> Decode.nullable)


type alias DestroySubscribedQueryRequiredArguments =
    { id : String }


{-| Destroys a SubscribedQuery
-}
destroy_subscribed_query : DestroySubscribedQueryRequiredArguments -> SelectionSet decodesTo UserEating.Object.SubscribedQuery -> SelectionSet (Maybe decodesTo) RootMutation
destroy_subscribed_query requiredArgs object_ =
    Object.selectionForCompositeField "destroy_subscribed_query" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


type alias DestroyUserRequiredArguments =
    { id : String }


{-| Destroys a User
-}
destroy_user : DestroyUserRequiredArguments -> SelectionSet decodesTo UserEating.Object.User -> SelectionSet (Maybe decodesTo) RootMutation
destroy_user requiredArgs object_ =
    Object.selectionForCompositeField "destroy_user" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


type alias DestroyUserStatusRequiredArguments =
    { id : String }


{-| Destroys a UserStatus
-}
destroy_user_status : DestroyUserStatusRequiredArguments -> SelectionSet decodesTo UserEating.Union.UserStatus -> SelectionSet (Maybe decodesTo) RootMutation
destroy_user_status requiredArgs object_ =
    Object.selectionForCompositeField "destroy_user_status" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


type alias DestroyWebsocketConnectionRequiredArguments =
    { id : String }


{-| Destroys a WebsocketConnection
-}
destroy_websocket_connection : DestroyWebsocketConnectionRequiredArguments -> SelectionSet decodesTo UserEating.Object.WebsocketConnection -> SelectionSet (Maybe decodesTo) RootMutation
destroy_websocket_connection requiredArgs object_ =
    Object.selectionForCompositeField "destroy_websocket_connection" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


type alias UpdateSubscribedQueryOptionalArguments =
    { id : OptionalArgument String }


type alias UpdateSubscribedQueryRequiredArguments =
    { subscribed_query : UserEating.InputObject.SubscribedQueryInputType }


{-| Updates a SubscribedQuery
-}
update_subscribed_query : (UpdateSubscribedQueryOptionalArguments -> UpdateSubscribedQueryOptionalArguments) -> UpdateSubscribedQueryRequiredArguments -> SelectionSet decodesTo UserEating.Object.SubscribedQuery -> SelectionSet (Maybe decodesTo) RootMutation
update_subscribed_query fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "update_subscribed_query" (optionalArgs ++ [ Argument.required "subscribed_query" requiredArgs.subscribed_query UserEating.InputObject.encodeSubscribedQueryInputType ]) object_ (identity >> Decode.nullable)


type alias UpdateUserOptionalArguments =
    { id : OptionalArgument String }


type alias UpdateUserRequiredArguments =
    { user : UserEating.InputObject.UserInputType }


{-| Updates a User
-}
update_user : (UpdateUserOptionalArguments -> UpdateUserOptionalArguments) -> UpdateUserRequiredArguments -> SelectionSet decodesTo UserEating.Object.User -> SelectionSet (Maybe decodesTo) RootMutation
update_user fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "update_user" (optionalArgs ++ [ Argument.required "user" requiredArgs.user UserEating.InputObject.encodeUserInputType ]) object_ (identity >> Decode.nullable)


type alias UpdateUserStatusOptionalArguments =
    { id : OptionalArgument String }


type alias UpdateUserStatusRequiredArguments =
    { user_status : UserEating.InputObject.UserStatusInputType }


{-| Updates a UserStatus
-}
update_user_status : (UpdateUserStatusOptionalArguments -> UpdateUserStatusOptionalArguments) -> UpdateUserStatusRequiredArguments -> SelectionSet decodesTo UserEating.Union.UserStatus -> SelectionSet (Maybe decodesTo) RootMutation
update_user_status fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "update_user_status" (optionalArgs ++ [ Argument.required "user_status" requiredArgs.user_status UserEating.InputObject.encodeUserStatusInputType ]) object_ (identity >> Decode.nullable)


type alias UpdateWebsocketConnectionOptionalArguments =
    { id : OptionalArgument String }


type alias UpdateWebsocketConnectionRequiredArguments =
    { websocket_connection : UserEating.InputObject.WebsocketConnectionInputType }


{-| Updates a WebsocketConnection
-}
update_websocket_connection : (UpdateWebsocketConnectionOptionalArguments -> UpdateWebsocketConnectionOptionalArguments) -> UpdateWebsocketConnectionRequiredArguments -> SelectionSet decodesTo UserEating.Object.WebsocketConnection -> SelectionSet (Maybe decodesTo) RootMutation
update_websocket_connection fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "update_websocket_connection" (optionalArgs ++ [ Argument.required "websocket_connection" requiredArgs.websocket_connection UserEating.InputObject.encodeWebsocketConnectionInputType ]) object_ (identity >> Decode.nullable)
